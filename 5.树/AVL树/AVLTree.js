// 平衡因子bf 右子树的高度减去左子树的高度, 
// 对于一棵AVL树，左右子树的任意一个节点的平衡因子绝对值不超过1
// 对于一个有n个节点的AVL树，它的高度将保持在O(log2n)，平均搜索长度也可以保持在O(log2n)

// 注：作用：解决二叉搜索树最坏情况下高度太高的问题(等同于链表)
// 插入四种旋转方式
// 1.左单旋转：不平衡节点平衡因子为2，其右孩子平衡因子为1时，发生左单旋转
// 2.右单旋转：不平衡节点的平衡因子为-2，左孩子平衡因子为-1时，进行右单翻转
// 3.先左后右双旋转：不平衡节点的平衡因子为-2，左孩子平衡因子为1时,先左后右双旋转
// 4.先右后左双旋转：不平衡节点的平衡因子为2，右孩子平衡因子为-1时,先右后左双旋转

// 删除时的平衡化处理
// 1.parent平衡因子从0变成1 或者-1
// 2.parent平衡因子从-1或1 变成0
// 3.parent平衡因子从1变成2 或者从-1变成-2
//   3.1.删除后pr平衡因子为2，q平衡因子为0(pr为parent,q为右孩子)--旋转后树的高度依然是h+2
//   3.2.删除后pr平衡因子是2，q平衡因子是1--旋转后树的高度是h+1
//   3.3.删除后pr平衡因子是2，q平衡因子是-1--难